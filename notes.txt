 echo "https://57-93571295-gh.circle-artifacts.com/0/home/circleci/artifacts/spigot.jar?circle-token=e5a70f5c4cdc38711067c00ec66bb118e4f1bacb" | xargs curl -o foo.jar

 ================

rebuild grpc-craft plugin, deploy, restart bar spigot, for a given branch:

./server pull-and-rebuild-grpc-craft steve.oogway.big_rename_of_java_oto_oogway_backend && ./playground bar update-grpc-craft

========

hygiene TODO's

README
- instructions for setting up python env (pyenv instructions, install simplejson, jsonschema)
- dev env recommendations: sublime 3 w/ anaconda, and linter turned off via property

work
- split up playground file
- audit playground and delete unused code/functionality


=========

Multi-account notes

audit all aspect of this setup and create a plan for how access control could be safely shared
this is the immediate term plan, aimed at me and Matt.
issues:
  - IAM
  - ownership?
  - auto-shutoff / cost control
  - access keys and how they are placed on servers (is there any way to auto-provision and update public keys?)

simple ec2 instance sharing.
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-explicit.html

=========


create a jsonschema for config files, get rid of code assertions.

client requirements...jsonschema


Cheat sheet:
  /home/ubuntu/.python-virtualenv/local/lib/python2.7/site-packages/IPython/html/templates/notebook.html
  <div id="notebook"><div class="container"><pre>HELLO</pre></div></div>


good errors

for ex, when player connect and player not present, list players connected (or say 'No players are in the game')
focus is on sentences that are direct and that kids will understand.

log server trace and put it somewhere easy to access?

=========

ebs notes:
  create 2gb general ssd ebs volume
  device name = sdf
  attach to running instance
  in the instance...
    mkdir /home/ubuntu/data
    sudo mkfs.ext4 /dev/xvdf
    sudo mount /dev/xvdf /home/ubuntu/data
    df -kh
      (should see that data has 2G free)

  exercise idea:
    split up the class
    make an alphabet
    function per letter?
   …need to collaborate on code…share code
   …shared ipython instance with links into all kids notebooks?
   …then make libraries that they can reuse...

============

Expose entities and entity actions?

============

should i have the turtle operate in infinite space, and only paint in the mc world?
  or "flip over"? (start from the bottom of the earth...)
  set a bounding box?

============

try rebuild from scratch

turtle...
  try notebook import
  use degrees (sphere)

mcpi - bring in other sorts of blocks
then...entity creation?
  really need and entity that points in a direction
  pick an animal?
  will they stay in mid-air? (collisions too...)

teaching...
  remember that this can be a very XCode playground-type experience.
    explanation with runnable snippets
    images too?
      ...only simple ones. they need to see what happens on screen with stuff THEY make.
============

mc turtle should work in disconnected state...fall back to using absolute coords

============

need to work on mcpi errors. these need to be way more obvious.

============

ipython environment principles:
  boilerplate falls away
  as close to papert/mindstorms ch3 feel as possible
    still python though
  procedural python. not oo.
  discoverability via <TAB>

============

coord chart
  n/s/e/w/up/down, with +- effects on x,y,z
don't forget legos

============

in computing there are no big problems
  there are only problems that have lots of small parts
  you have to look at a big problem and divide it up. find the small parts.
  you can solve big problems by training yourself to focus on the small, key parts.
  moving a mountain one stone at a time

in this class there are no dumb questions

============

ipython - make an easy shortcut to run and keep cursor in current cell...
...e.g. shift+enter
http://stackoverflow.com/questions/24210857/how-to-make-ipython-do-not-leave-edit-mode-after-press-ctrl-enter

...this definitely belongs on an instruction card
...along with screenshots of ipython and code...

ipython kernel restart is great

============

some sort of automation / templating for setting up a local / osx environment
...completely separate from the server setup

============

editor lessons

undo, redo
run
  just like the robot exercise
tab completion
  means you can be lazy

============

# TODO: need to check ipython effects locally...
# if classes show up in autocomplete, then split classes into a separate file.
# ...I wonder if the import will expose them though...
# TODO: generate docs for stuff useful in turtle using sphinx
#   things that are visible externally...
#   ...or that document game metadata
# TODO: make a separate "game"/"game_info" module?
#   ...future...make this a project?
#   ...codegen to various languages
#   ...this is a good basis for sphinx documentation
#   ...put sphinx output on website
# TODO: do something similar for entities
#   enumerate entity tasks...
# entity.startTask(uuid (or array...?), tasks.OCELOT_SIT)
# entity.startTask(uuid, tasks.OCELOT_FOLLOW_OWNER)
# entity.stopTask(uuid, tasks.OCELOT_FOLLOW_OWNER)
# ...will need lots of error checking / help...
# also use type to determine whether task was mis-applied
# entity.create(x, y, z, entity.OCELOT) : uuid
# entity.getNearest(x, y, z, entity.OCELOT, 7) : uuid[]

# pendown(entity.OCELOT)
# penup()
# turtle/functional method...
# start(tasks.OCELOT_FOLLOW_OWNER, select(entity.OCELOT, trail())
# ...or just match only things created that task would apply to (default select)
# ...and trail() is implicit too
# start(tasks.OCELOT_FOLLOW_OWNER)
# start(tasks.OCELOT_FOLLOW_OWNER, select=entity.OCELOT)
# start(tasks.OCELOT_FOLLOW_OWNER, select=first(entity.OCELOT))
# start(tasks.OCELOT_FOLLOW_OWNER, select=last(entity.OCELOT))
# stop(tasks.OCELOT_FOLLOW_OWNER)
# start(tasks.OCELOT_MATE)
# start(tasks.OCELOT_ATTACK)
# select_distance(entity.OCELOT, 100, uuid=reference)
# select_distance(entity.OCELOT, 100, x= y= z=)

# (automatic)
from turtle import forward, backward, right, left, up, down, begin, pen_up, pen_down, chat
# then...world inspection methods.
# test(is(block.AIR), forward, forward, right, forward)
# test(is(block.AIR)) ... implicit forward
# test(is_not(block.AIR)) ...implicit forward ...future, can take a lambda
# test(is(block.AIR))
# test(forward, forward, right, forward)

============

refactor server config stuff
  specify git url + branch as main static website (in config)
  specify http basic auth password
  minecraft server whitelist

  ...then done w this stuff for a while. switch to turtle lib.
=============

/foo
  index...should show link to mc connection instructions, and link to python page
    ...mc whitelist info too?
    also, link to some coding help.


Notebook management.
  copy nb from one playground to others, with playground origin prefix?


=============

document / howto

nginx logs
disk layout

opening ports...
  ...show aws console docs. don't automate ec2 api stuff. this is server-focused.
  open up 80
  open up mc and ipython ports

dns
  dnsimple screenshots

=============

backing data up
  restoring data

world to s3
notebooks to git
  also, transform notebooks to python files?

minecraft max heap

=============

user whitelist

=============

group context...
  basic auth on the whole site (a.gpk.com)
  so, nginx proxies to ipython
    ipython subdomain per playground name

dir per playground
  a.gpk.com/foo/notebook -> ipython
  a.gpk.com/foo/ -> instructions (static html)
    ...still need offline instructions w/ password, etc
  a.gpk.com is a single ip/server

  ...nginx runs on port 80, normal package install, and we just reload it from time to time
    ...put config in the "playgrounds" dir

cgroup limits for ipy and mc-server...
  oversubscribe the server...
  just make the limits fixed (75% of resources?)? just defending against
  one or two instances killing the server at any given time.

=============

python setup.py install
pip install .[notebook]

.python-virtualenv/bin/ipython notebook --no-browser --ip=0.0.0.0

in playground...

--notebook-dir=

--port=<Integer> (NotebookApp.port

--ipython-dir=<Unicode> (BaseIPythonApplication.ipython_dir)
    Default: u''
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This option can also be specified through the
    environment variable IPYTHONDIR.


=============

tmux

I appreciate this is an older article so you may now be aware of this, but you don't need to send-keys to launch programs within tmux panes. Instead just append your program to the split-window. eg:

split-window -d -t 0 -v 'htop'

============

terminology: playground

next: make an "env"
  make a clean subset of instance commands
    playground mike status
    playground mike create # allocates a config.json, with port assignments, etc. scans for next available ports. creates symlinks, etc.
    playground mike docs # merge config.json with template (w/ markdown?) in order to make instructions...should have images and such. pdf output. (pandoc)
    playground mike overlay
    playground mike start   # tmux
    playground mike stop    # tmux
    playground mike destroy I_AM_SURE
    playground mike restart-minecraft-server #...wait for port
    playground mike restart-ipython #...wait for port
    playground mike backup-minecraft mike-bak-01 # check for mike-bak-01 on s3, stop, zip mc, upload to s3 ... install s3cmd for this, keep creds local.
    playground mike restore-minecraft mike-bak-01
  overlay settings, eula, etc
  interpret, then scp -r

separate pre- and post-ami command suites?


then: build the plugin, and deploy to server (mods subdir)

then: overlay-template capability

then: tmux
  w/ auto-restart


then: ipython

so a quick plugin deploy is just a
  git pull
  build plugin on server
  copy to one or more instances
  server restart (kill -1 server)

add to dotfile:
  repo urls + branches to use for various repos

commands:
  print-settings
  set key value
    ...must be a valid setting
    ...regex validation?

keep a "data" dir that separated from all the code and artifacts,
that contains any human work, that we symlink into from elsewhere.
  e.g. code and other written artifacts
