refactor server config stuff
  specify git url + branch as main static website (in config)
  specify http basic auth password
  minecraft server whitelist

  ...then done w this stuff for a while. switch to turtle lib.
=============

/foo
  index...should show link to mc connection instructions, and link to python page
    ...mc whitelist info too?
    also, link to some coding help.


Notebook management.
  copy nb from one playground to others, with playground origin prefix?


=============

document / howto

nginx logs
disk layout

opening ports...
  ...show aws console docs. don't automate ec2 api stuff. this is server-focused.
  open up 80
  open up mc and ipython ports

dns
  dnsimple screenshots

=============

backing data up
  restoring data

world to s3
notebooks to git
  also, transform notebooks to python files?

=============

user whitelist

=============

group context...
  basic auth on the whole site (a.gpk.com)
  so, nginx proxies to ipython
    ipython subdomain per playground name

dir per playground
  a.gpk.com/foo/notebook -> ipython
  a.gpk.com/foo/ -> instructions (static html)
    ...still need offline instructions w/ password, etc
  a.gpk.com is a single ip/server

  ...nginx runs on port 80, normal package install, and we just reload it from time to time
    ...put config in the "playgrounds" dir

cgroup limits for ipy and mc-server...
  oversubscribe the server...
  just make the limits fixed (75% of resources?)? just defending against
  one or two instances killing the server at any given time.

=============

python setup.py install
pip install .[notebook]

.python-virtualenv/bin/ipython notebook --no-browser --ip=0.0.0.0

in playground...

--notebook-dir=

--port=<Integer> (NotebookApp.port

--ipython-dir=<Unicode> (BaseIPythonApplication.ipython_dir)
    Default: u''
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This option can also be specified through the
    environment variable IPYTHONDIR.


=============

tmux

I appreciate this is an older article so you may now be aware of this, but you don't need to send-keys to launch programs within tmux panes. Instead just append your program to the split-window. eg:

split-window -d -t 0 -v 'htop'

============

terminology: playground

next: make an "env"
  make a clean subset of instance commands
    playground mike status
    playground mike create # allocates a config.json, with port assignments, etc. scans for next available ports. creates symlinks, etc.
    playground mike docs # merge config.json with template (w/ markdown?) in order to make instructions...should have images and such. pdf output. (pandoc)
    playground mike overlay
    playground mike start   # tmux
    playground mike stop    # tmux
    playground mike destroy I_AM_SURE
    playground mike restart-minecraft-server #...wait for port
    playground mike restart-ipython #...wait for port
    playground mike backup-minecraft mike-bak-01 # check for mike-bak-01 on s3, stop, zip mc, upload to s3 ... install s3cmd for this, keep creds local.
    playground mike restore-minecraft mike-bak-01
  overlay settings, eula, etc
  interpret, then scp -r

separate pre- and post-ami command suites?


then: build the plugin, and deploy to server (mods subdir)

then: overlay-template capability

then: tmux
  w/ auto-restart


then: ipython

so a quick plugin deploy is just a
  git pull
  build plugin on server
  copy to one or more instances
  server restart (kill -1 server)

add to dotfile:
  repo urls + branches to use for various repos

commands:
  print-settings
  set key value
    ...must be a valid setting
    ...regex validation?

keep a "data" dir that separated from all the code and artifacts,
that contains any human work, that we symlink into from elsewhere.
  e.g. code and other written artifacts
