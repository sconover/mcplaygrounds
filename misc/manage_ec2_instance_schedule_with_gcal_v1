#!/usr/bin/python

# This script will start or stop an ec2 instance based on an ical url, such as one
# based on a public google calendar.
#
# By default, the server is up (i.e., nothing is scheduled on the calendar)
# Events on the calendar are treated as defining downtime. You may want to reinforce this
# by naming the event something like "Server off".
#
# requirement: install awscli (sudo apt-get install awscli) and configure it (aws configure)
# manage online schedule of a server in ec2
#
# you can run a t2.micro instance in ec2 that acts as an orchestrator. That's $10/month fixed cost
# (i.e. you could manage many servers with the t2.micro)
#
# run this in tmux:
# while :; do ./manage_ec2_instance_schedule_with_gcal_v1 https://www.google.com/calendar/ical/some-gcal-url/public/basic.ics i-5aed822c us-west-2; sleep 15; done
#
# This way, you can make changes to server up/down status by simply making changes to the schedule on the calendar.


# https://nylas.com/blog/rrules/

import sys
import subprocess
import time
import icalendar
import datetime
import dateutil
import pytz

ical_url = sys.argv[1]
ec2_instance_id = sys.argv[2]
ec2_region = sys.argv[3]


ical_content = subprocess.check_output(["/usr/bin/curl", "-s", ical_url]).strip()
cal = icalendar.Calendar.from_ical(ical_content)
#print cal.to_ical()
this_tz=pytz.timezone('US/Pacific')
now = datetime.datetime.now(this_tz).replace(tzinfo=None)

print "=== start evaluation ==="
in_busy_period = False
print "  now=" + str(now)
for component in cal.walk():
    if component.name == "VEVENT":
        if 'RRULE' in component:
            print "  " + component.get('summary')
            start = component['DTSTART'].dt.replace(tzinfo=None)
            rrule = dateutil.rrule.rrulestr(component['RRULE'].to_ical(), dtstart=start)
            rruleset = dateutil.rrule.rruleset()
            rruleset.rrule(rrule)
            print "    rrule=" + str(component['RRULE'].to_ical())
            print "    start=" + str(start)
            if 'EXDATE' in component:
                dts = []
                for entry in component['EXDATE']:
                    for some_dt in entry.dts:
                        dt = some_dt.dt.replace(tzinfo=None)
                        dts.append(str(dt))
                        rruleset.exdate(dt)
                print "    excluding dates=" + ",".join(dts)
            event_duration = component.get('DTEND').dt - component.get('DTSTART').dt
            recent_from_dt = rruleset.before(now)
            recent_to_dt = recent_from_dt + event_duration
            print "    event_duration=" + str(event_duration)
            print "    recent_from_dt=" + str(recent_from_dt)
            print "    recent_to_dt=" + str(recent_to_dt)
            overlaps_now = recent_from_dt <= now <= recent_to_dt
            print "    overlaps_now=" + str(overlaps_now)
            if overlaps_now:
                in_busy_period = True
        else:
           print "  " + component.get('summary')
           start = component['DTSTART'].dt.astimezone(this_tz).replace(tzinfo=None)
           end = component['DTEND'].dt.astimezone(this_tz).replace(tzinfo=None)
           print "    start=" + str(start)
           print "    end=" + str(end)
           overlaps_now = start <= now <= end
           print "    overlaps_now=" + str(overlaps_now)
           if overlaps_now:
                in_busy_period = True
print "=== end evaluation. in_busy_period=" + str(in_busy_period) + " ==="
if in_busy_period:
    cmd_parts = ["aws", "ec2", "stop-instances", "--instance-ids", ec2_instance_id, "--region", ec2_region, "--output", "text"]
    print "As of " + str(now) + " detected busy on calendar, stopping instance:"
    print " ".join(cmd_parts)
    subprocess.call(cmd_parts)
else:
    cmd_parts = ["aws", "ec2", "start-instances", "--instance-ids", ec2_instance_id, "--region", ec2_region, "--output", "text"]
    print "As of " + str(now) + " deteacted non-busy on calendar, starting instance:"
    print " ".join(cmd_parts)
    subprocess.call(cmd_parts)
