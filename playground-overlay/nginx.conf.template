# see http://stackoverflow.com/questions/22665809/how-to-configure-ipython-behind-nginx-in-a-subpath

location = /${playground_name} {
  rewrite ^ /${playground_name}/ permanent;
}

location /${playground_name}/ {
  auth_basic "Login Required";
  auth_basic_user_file /home/ubuntu/playgrounds/${playground_name}/htpasswd_file;

  alias /home/ubuntu/playgrounds/${playground_name}/webroot/;

  location /${playground_name}/python/ {
    proxy_pass http://127.0.0.1:${ipython_notebook_server_http_port};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $$http_upgrade; # dollar-dollar escapes to dollar w/ python string.Template
    proxy_set_header Connection "upgrade";
    proxy_set_header Origin "";
  }

  location = /${playground_name}/maps {
    rewrite ^ /${playground_name}/maps/ permanent;
  }

  location /${playground_name}/maps/ {
    alias /home/ubuntu/maps/;
  }

  location /${playground_name}/doc.html {
    alias /home/ubuntu/playgrounds/${playground_name}/ipython-notebook-root/data/share/doc.html;
  }

  # NOTE: there MUST be agreement between this path, and the "append log uri"
  # path in any client code.
  #
  # NOTE: the client log file must exist and must be owned by www-data in order for this
  # to function.
  #
  # This lua script causes the full request body to be read, and then appends
  # the request body to the client log file.
  #
  # At present there is no log rollover scheme.
  #
  # Sample way to test via curl
  # echo "a=b" | curl -X POST http://localhost/foo/appendlog -d @- -u foo:foofoo
  location /${playground_name}/appendlog {
    content_by_lua '
      local f = assert(io.open("/home/ubuntu/playgrounds/${playground_name}/client.log", "a"))
      ngx.req.read_body()
      f:write(ngx.req.get_body_data())
      f:close()
    ';
  }

  # GAME_BIN_PATHS_GO_HERE


  # URL_BIN_PATHS_START_HERE
  # URL_BIN_PATHS_END_HERE
}

