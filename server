#!/usr/bin/env python

import argparse
import os.path
import os

from lib import const
from lib.core import ssh_parts, scp_parts, ssh_exec, ssh_exec_all, ssh_get, scp_r, \
    set_current_server_config, load_current_server_config

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='sub-command help')

def add_simple_subparser(f):
    command_name = f.__name__.replace("_", "-")
    p = subparsers.add_parser(command_name, help='{} help'.format(command_name))
    p.set_defaults(func=f)

def use(args):
    set_current_server_config(args.server_label, args.server_config_file)

use_parser = subparsers.add_parser('use', help='use help')
use_parser.add_argument('server_label', help='server config to use, from config file')
use_parser.add_argument('server_config_file', help='path to server config file')
use_parser.set_defaults(func=use)

def check(args):
    ssh_exec("uname -a")
add_simple_subparser(check)

def bootstrap(args):
    config = load_current_server_config()

    # allow www-data user to execute bin scripts as the ubuntu user, nopasswd
    ssh_exec_all([
        "sudo sh -c \"echo 'www-data ALL = (ubuntu) NOPASSWD: /home/ubuntu/playgrounds/*/bin/*' > /etc/sudoers.d/www-data-playground-bin\"",
        "sudo sh -c \"echo 'www-data ALL = (ubuntu) NOPASSWD: /home/ubuntu/playgrounds/*/bin/*/*' >> /etc/sudoers.d/www-data-playground-bin\"",
        "sudo sh -c \"echo 'www-data ALL = (ubuntu) NOPASSWD: /home/ubuntu/playgrounds/*/bin/*/*/*' >> /etc/sudoers.d/www-data-playground-bin\""
    ])

    # ugh bitrot, commenting this out
    # ssh_exec_all([
    #     "sudo add-apt-repository {} -y".format(config.modern_gradle_apt_repo), # need a modern gradle
    #     # "sudo add-apt-repository {} -y".format(config.modern_nginx_apt_repo), # need a modern nginx
    #     "sudo add-apt-repository {} -y".format(config.modern_openjdk_apt_repo), # need java 8
    #     "sudo apt-get update",
    #     "sudo apt-get install apache2-utils build-essential dstat git gradle htop maven nginx nginx-extras nodejs-legacy npm openjdk-8-jdk python-pip python-dev sysstat tmux -y",
    #     "sudo update-java-alternatives --set java-1.8.0-openjdk-amd64",
    #     "sudo pip install virtualenv virtualenvwrapper"
    # ])

    # jdk 8
    # ssh_exec_all([
    #     "sudo apt-get update",
    #     "sudo apt-get install openjdk-8-jdk icedtea-7-plugin -y",
    #     "sudo apt-get autoremove libjna-java -y" # having this in place causes "updateLastError method for class com.sun.jna.Native" when building spigot via maven
    # ])

    #     # also had to do this...not sure how to automate it...ugh
    #     ubuntu@ip-172-30-0-19:~$ sudo update-alternatives --config javac
    # sudo: unable to resolve host ip-172-30-0-19
    # There are 2 choices for the alternative javac (providing /usr/bin/javac).

    #   Selection    Path                                         Priority   Status
    # ------------------------------------------------------------
    # * 0            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1071      auto mode
    #   1            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1071      manual mode
    #   2            /usr/lib/jvm/java-8-openjdk-amd64/bin/javac   1069      manual mode

    # Press enter to keep the current choice[*], or type selection number: 2
    # update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode

    ssh_exec("file RaspberryJuiceSpongePlugin/.git || git clone {} --recursive".format(config.raspberry_juice_sponge_plugin_git_repo))
    ssh_exec("file ipython/.git || git clone {} --recursive".format(config.ipython_git_repo))
    ssh_exec("file mcpi/.git || git clone {}".format(config.mcpi_git_repo))
    ssh_exec("file mcgamedata/.git || git clone {}".format(config.mcgamedata_git_repo))
    ssh_exec("file oogway/.git || git clone {}".format(config.oogway_git_repo))
    ssh_exec("file spigot-buildtools/.git || git clone {}".format(config.spigot_buildtools_git_repo))
    ssh_exec("file grpc-craft/.git || git clone {}".format(config.grpc_craft_git_repo))

    # set up nginx, notably to be able to point to playground nginx.conf's
    scp_r("server-files/nginx.conf", "/tmp")
    ssh_exec_all([
        "sudo cp /tmp/nginx.conf /etc/nginx/nginx.conf",
        "sudo /etc/init.d/nginx reload"
    ])
add_simple_subparser(bootstrap)

def clean_code(args):
    ssh_exec_all([
        "rm -rf ipython",
        "rm -rf mcgamedata",
        "rm -rf mcpi",
        "rm -rf oogway",
        "rm -rf RaspberryJuiceSpongePlugin"
    ])
add_simple_subparser(clean_code)

def clean_ipython(args):
    ssh_exec("rm -rf {}".format(const.PYTHON_VIRTUALENV))
add_simple_subparser(clean_ipython)

def clean_minecraft_server(args):
    ssh_exec("rm -rf {}".format(const.MINECRAFT_LATEST_DIR))
add_simple_subparser(clean_minecraft_server)

def clean_artifacts(args):
    clean_ipython(args)
    clean_minecraft_server(args)
add_simple_subparser(clean_artifacts)

def clean_all(args):
    clean_code(args)
    clean_artifacts(args)
add_simple_subparser(clean_all)

def pull(args):
    config = load_current_server_config()

    ssh_exec_all([
        "cd $HOME/RaspberryJuiceSpongePlugin",
        "git pull --all",
        "git checkout {}".format(config.raspberry_juice_sponge_plugin_git_branch),
        "git submodule update --init --recursive",

        "cd $HOME/ipython",
        "git pull --all",
        "git checkout {}".format(config.ipython_git_branch),
        "git submodule update --init --recursive",

        "cd $HOME/mcpi",
        "git pull --all",
        "git checkout {}".format(config.mcpi_git_branch),

        "cd $HOME/mcgamedata",
        "git pull --all",
        "git checkout {}".format(config.mcgamedata_git_branch),

        "cd $HOME/oogway",
        "git pull --all",
        "git checkout {}".format(config.oogway_git_branch),

        "cd $HOME/spigot-buildtools",
        "git pull --all",
        "git checkout {}".format(config.spigot_buildtools_git_branch),

        "cd $HOME/grpc-craft",
        "git pull --all",
        "git checkout {}".format(config.grpc_craft_git_branch),
        "git submodule update --init --recursive"
    ])
add_simple_subparser(pull)

def build_minecraft_gradle(args):
    ssh_exec_all([
        "cd RaspberryJuiceSpongePlugin/submodules/Sponge",
        "time ./gradlew setupDecompWorkspace --refresh-dependencies",
        "time ./gradlew"
    ])

def populate_minecraft_latest_with_minecraft_server(args):
    sponge_build_dir = "RaspberryJuiceSpongePlugin/submodules/Sponge/build/libs/"
    new_executable_jar = os.path.join(sponge_build_dir, ssh_get("ls {} | egrep '^sponge-' | egrep -v '(javadoc|release|sources)'".format(sponge_build_dir)))

    ssh_exec_all([
        "rm -rf {}".format(const.MINECRAFT_LATEST_DIR),
        "mkdir {}".format(const.MINECRAFT_LATEST_DIR),
        "cp {} {}".format(new_executable_jar, os.path.join(const.MINECRAFT_LATEST_DIR, const.MINECRAFT_SERVER_JAR_NAME)),
        "cd {}".format(const.MINECRAFT_LATEST_DIR),
        "time java -jar {} install".format(const.MINECRAFT_SERVER_JAR_NAME),
        "ls -lh ."
    ])

def build_minecraft_server(args):
    build_minecraft_gradle(args)
    populate_minecraft_latest_with_minecraft_server(args)
add_simple_subparser(build_minecraft_server)

def build_raspberry_juice_plugin_gradle(args):
    ssh_exec_all(     [
        "cd RaspberryJuiceSpongePlugin",
        "time gradle --no-rebuild :clean :build"
    ])

def populate_minecraft_latest_with_raspberry_juice_plugin(args):
    new_plugin_jar = ssh_get("ls RaspberryJuiceSpongePlugin/build/libs/RaspberryJuiceSpongePlugin*.jar")
    mods_dir = os.path.join(const.MINECRAFT_LATEST_DIR, "mods")
    ssh_exec_all([
        "rm -rf {}".format(mods_dir),
        "mkdir -p {}".format(mods_dir),
        "cp {} {}".format(new_plugin_jar, mods_dir),
        "ls -lh {}".format(mods_dir)
    ])

def build_raspberry_juice_plugin(args):
    build_raspberry_juice_plugin_gradle(args)
    populate_minecraft_latest_with_raspberry_juice_plugin(args)
add_simple_subparser(build_raspberry_juice_plugin)

def build_ipython_3x(args):
    ssh_exec_all([
        "virtualenv --no-site-packages " + const.PYTHON_VIRTUALENV,
        const.PYTHON_VIRTUALENV + "/bin/pip install invoke jinja2 jsonschema pyzmq pygments tornado",
        "npm install less bower",
        "cd ipython",
        "../{}/bin/python setup.py install".format(const.PYTHON_VIRTUALENV)
    ])
add_simple_subparser(build_ipython_3x)



# SPIGOT/GRPC-CRAFT START

def build_spigot_minecraft_buildtools_maven(args):
    ssh_exec_all([
        "cd spigot-buildtools",
        "time mvn clean package && time java -jar target/BuildTools.jar --disable-certificate-check --dev"
    ])
add_simple_subparser(build_spigot_minecraft_buildtools_maven)


def build_grpc_craft_plugin_for_spigot(args):
    ssh_exec_all([
        "cd grpc-craft",
        "time mvn clean package"
    ])
add_simple_subparser(build_grpc_craft_plugin_for_spigot)




# SPIGOT/GRPC-CRAFT END



def build(args):
    build_minecraft_server(args)
    build_raspberry_juice_plugin(args)
    build_ipython_3x(args)
add_simple_subparser(build)

def reboot(args):
    ssh_exec("sudo reboot")
add_simple_subparser(reboot)

def ssh(args):
    parts = ssh_parts()
    ssh_bin = parts.pop(0)
    parts.insert(0, "") # dunno why
    os.execv(ssh_bin, parts)
add_simple_subparser(ssh)

def scp(args):
    parts = scp_parts(args.local_path, args.remote_path)
    scp_bin = parts.pop(0)
    parts.insert(0, "") # dunno why
    os.execv(scp_bin, parts)
scp_parser = subparsers.add_parser("scp", help='{} scp')
scp_parser.add_argument('local_path', help='copy from local file or dir')
scp_parser.add_argument('remote_path', help='copy to remote file or dir')
scp_parser.set_defaults(func=scp)


args = parser.parse_args()
args.func(args)
