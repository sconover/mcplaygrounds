#!/usr/bin/env python

import sys
import argparse
import os.path
import shutil
import json
import time
from string import Template

from lib import const
from lib.core import ssh_exec, ssh_exec_all, ssh_get, scp_r, scp_r_remote_to_local
from lib.playground_config import PlaygroundConfig, load_playground_config

this_dir = os.path.dirname(os.path.realpath(__file__))
oogway_relative_dir = os.path.join(this_dir, "../oogway")
sys.path.append(oogway_relative_dir)

import oogway

OVERLAY_STAGING_DIR = "/tmp/playground-staging"

parser = argparse.ArgumentParser()
parser.add_argument('playground_name', type=str, help='help TODO')
subparsers = parser.add_subparsers(help='sub-command help')

def now_str():
    return time.strftime('%Y%m%d%H%M%S', time.localtime())

def pdir(playground_name):
    return "playgrounds/{}".format(playground_name)

def copy_minecraft_server_files(playground_name):
    ssh_exec("file {}/minecraft-server || (mkdir {}/minecraft-server && cp -R {}/. {}/minecraft-server/)".format(
        pdir(playground_name), pdir(playground_name), const.MINECRAFT_LATEST_DIR, pdir(playground_name)))

def stage_overlay_files(playground_config):
    shutil.rmtree(OVERLAY_STAGING_DIR, ignore_errors=True)
    shutil.copytree("playground-overlay", OVERLAY_STAGING_DIR)
    playground_config.write_to_file("{}/playground.json".format(OVERLAY_STAGING_DIR))

    for dirpath, dnames, fnames in os.walk(OVERLAY_STAGING_DIR):
        for f in fnames:
            path = os.path.join(dirpath, f)
            if (path.endswith(".template")):
                new_file_content = Template(open(path).read()).substitute(playground_config.to_dict())
                path_without_template_extension = os.path.splitext(path)[0]
                f = open(path_without_template_extension, 'w')
                f.write(new_file_content)
                f.close()
                os.remove(path)

def convert_markdown_to_ipython_notebook(markdown_file):
    this_dir = os.path.dirname(os.path.realpath(__file__))
    template_relative_path = os.path.join(this_dir, "./template/ipython.markdown.template")
    markdown_string_array = map(lambda line: '"' + line + '\\n"', open(markdown_file).read().split("\n"))
    markdown_string_array = ",\n".join(markdown_string_array)
    ipython_markdown = Template(open(template_relative_path).read()).substitute({"markdown_string_array": markdown_string_array})
    data_dir = os.path.join(OVERLAY_STAGING_DIR, "ipython-notebook-root/data")
    os.makedirs(data_dir)
    ipython_markdown_file = os.path.join(data_dir, os.path.basename(markdown_file).replace(".md", "") + ".ipynb")
    f = open(ipython_markdown_file, 'w')
    f.write(ipython_markdown)
    f.close()

def stage_generated_files(playground_config):
    oogway_docs_dir = os.path.join(os.path.dirname(oogway.__file__), "../docs")
    convert_markdown_to_ipython_notebook(os.path.join(oogway_docs_dir, "blocks.md"))

def create_and_link_shared_dir(playground_config):
    ssh_exec("file ipython-share || mkdir ipython-share")
    ssh_exec("touch ipython-share/__init__.py")
    ssh_exec("ln -nsf /home/ubuntu/ipython-share {}/ipython-notebook-root/data/share".format(pdir(playground_config.playground_name)))
    scp_r(this_dir + "/misc/data_share_init.py", "{}/ipython-notebook-root/data/share/__init__.py".format(pdir(playground_config.playground_name)))

def upload_staged_files(playground_name):
    scp_r(OVERLAY_STAGING_DIR + "/.", pdir(playground_name))

def reset_basic_auth_password(playground_name, password):
    ssh_exec("/usr/bin/htpasswd -b -c {}/htpasswd_file {} {}".format(
        pdir(playground_name),
        playground_name,
        password
    ))

def reload_nginx():
    ssh_exec("sudo /etc/init.d/nginx reload")

def add_simple_subparser(f):
    command_name = f.__name__.replace("_", "-")
    p = subparsers.add_parser(command_name, help='{} help'.format(command_name))
    p.set_defaults(func=f)

def exists(args):
    ssh_exec("file {}".format(pdir(args.playground_name)))
add_simple_subparser(exists)

def status(args):
    # TODO: should be better
    ssh_exec("file {} || true".format(pdir(args.playground_name)))
add_simple_subparser(status)

def test_overlay(args):
    playground_config = load_playground_config(args.playground_name, args.playground_config_file)
    stage_overlay_files(playground_config)
    stage_generated_files(playground_config)
    create_and_link_shared_dir(playground_config)
test_overlay_parser = subparsers.add_parser("test-overlay", help='{} overlay')
test_overlay_parser.add_argument('playground_config_file', help='json config for playgrounds')
test_overlay_parser.set_defaults(func=test_overlay)

def overlay(args):
    playground_config = load_playground_config(args.playground_name, args.playground_config_file)
    stage_overlay_files(playground_config)
    stage_generated_files(playground_config)
    create_and_link_shared_dir(playground_config)
    upload_staged_files(args.playground_name)
    reset_basic_auth_password(args.playground_name, playground_config.web_password)
    reload_nginx()
overlay_parser = subparsers.add_parser("overlay", help='{} overlay')
overlay_parser.add_argument('playground_config_file', help='json config for playgrounds')
overlay_parser.set_defaults(func=overlay)

def refresh_ipython(args):
    ssh_exec_all([
        "mkdir -p {}".format(ipython_data_dir(args.playground_name)),
        "rm -rf {}/ipython-notebook-root/lib".format(pdir(args.playground_name)),
        "mkdir -p {}/ipython-notebook-root/lib".format(pdir(args.playground_name)),
        "cp -r mcpi/mcpi {}/ipython-notebook-root/lib/".format(pdir(args.playground_name)),
        "cp -r mcgamedata/mcgamedata {}/ipython-notebook-root/lib/".format(pdir(args.playground_name)),
        "cp -r oogway/oogway {}/ipython-notebook-root/lib/".format(pdir(args.playground_name)),
        "mkdir -p {}/ipython-notebook-root/lib/codeshare".format(pdir(args.playground_name))
    ])
    scp_r(this_dir + "/codeshare/extract.py", "{}/ipython-notebook-root/lib/codeshare/".format(pdir(args.playground_name)))
    scp_r(this_dir + "/codeshare/ipynb_util.py", "{}/ipython-notebook-root/lib/codeshare/".format(pdir(args.playground_name)))
    scp_r(this_dir + "/codeshare/document.py", "{}/ipython-notebook-root/lib/codeshare/".format(pdir(args.playground_name)))
add_simple_subparser(refresh_ipython)

def create(args):
    ssh_exec("mkdir -p {}".format(pdir(args.playground_name)))
    copy_minecraft_server_files(args.playground_name)
    refresh_ipython(args)
    overlay(args)
    write_crontab(args)
    write_mapcrafter_conf(args)
create_parser = subparsers.add_parser("create", help='{} overlay')
create_parser.add_argument('playground_config_file', help='json config for playgrounds')
create_parser.set_defaults(func=create)

def tmux_kill(session_name):
    if does_tmux_session_exist(session_name):
        ssh_exec("tmux kill-session -t " + session_name)
    else:
        print "tmux session '{}' not found, doing nothing.".format(session_name)

def tmux_start(session_name):
    if does_tmux_session_exist(session_name):
        print "tmux session '{}' found, doing nothing.".format(session_name)
    else:
        start_command = ssh_get("crontab -l | grep 'new-session -s " + session_name + "' | sed 's/^\@reboot //'").strip()
        ssh_exec(start_command)

def does_tmux_session_exist(session_name):
    output = ssh_get("tmux ls | egrep '^" + session_name + ": ' || true").strip()
    if session_name in output:
        return True
    else:
        return False

def stop_ipython(args):
    tmux_kill(args.playground_name + "-py")
add_simple_subparser(stop_ipython)

def stop_minecraft(args):
    tmux_kill(args.playground_name + "-mc")
add_simple_subparser(stop_minecraft)

def start_ipython(args):
    tmux_start(args.playground_name + "-py")
add_simple_subparser(start_ipython)

def start_minecraft(args):
    tmux_start(args.playground_name + "-mc")
add_simple_subparser(start_minecraft)

def restart_ipython(args):
    stop_ipython(args)
    start_ipython(args)
add_simple_subparser(restart_ipython)

def restart_minecraft(args):
    stop_minecraft(args)
    start_minecraft(args)
add_simple_subparser(restart_minecraft)

def stop_minecraft(args):
    tmux_kill(args.playground_name + "-mc")
add_simple_subparser(stop_minecraft)

def start_ipython(args):
    tmux_start(args.playground_name + "-py")
add_simple_subparser(start_ipython)

def start_minecraft(args):
    tmux_start(args.playground_name + "-mc")
add_simple_subparser(start_minecraft)

def stop(args):
    stop_ipython(args)
    stop_minecraft(args)
add_simple_subparser(stop)

def start(args):
    start_minecraft(args)
    start_ipython(args)
add_simple_subparser(start)

def update(args):
    stop(args)
    create(args)
add_simple_subparser(update)

def update_raspberry_plugin(args):
    stop_minecraft(args)
    ssh_exec("rm " + pdir(args.playground_name) + "/minecraft-server/mods/* && cp minecraft-latest/mods/* " +
        pdir(args.playground_name) + "/minecraft-server/mods/")
    start_minecraft(args)
add_simple_subparser(update_raspberry_plugin)

def destroy(args):
    exists(args)
    stop(args)
    ssh_exec("rm -rf {}".format(pdir(args.playground_name)))
add_simple_subparser(destroy)

def ipython_data_dir(playground_name):
    return "{}/ipython-notebook-root/data".format(pdir(playground_name))

def minecraft_world_dir(playground_name):
    return "{}/minecraft-server/world".format(pdir(playground_name))

# TODO: backup ipynb's
# TODO: delete ipynb's with name match
# TODO: ...then copy the ipynb's


def quick_backup_ipython_notebooks(playground_name):
    backup_dir = os.path.join("ipython_quick_backups", time.strftime("%Y%m%dT%H%M%S") + "-" + playground_name)
    backup_ipython_notebooks(playground_name, backup_dir)

def copy_ipynb(args):
    quick_backup_ipython_notebooks(args.playground_name)
    existing_ipynb_wildcard = os.path.join(ipython_data_dir(args.playground_name), args.ipynb_wildcard + ".ipynb")
    ipynb_wildcard = os.path.join(ipython_data_dir(args.source_playground_name), args.ipynb_wildcard + ".ipynb")
    ipynbs = ssh_get("ls {}".format(ipynb_wildcard)).strip().split("\n")

    if len(ipynbs) == 0:
        raise Exception("No ipython notebooks found matching {}".format(ipynb_wildcard))
    else:
        print "will copy:"
        for ipynb in ipynbs:
            print ipynb
    ssh_exec("rm {} || true".format(existing_ipynb_wildcard))
    ssh_exec("cp {} {}".format(ipynb_wildcard, ipython_data_dir(args.playground_name)))
copy_ipynb_parser = subparsers.add_parser("copy-ipynb", help='{} copy-ipynb')
copy_ipynb_parser.add_argument('source_playground_name', help='the playground that has the ipython notebook(s)')
copy_ipynb_parser.add_argument('ipynb_wildcard', help='wildcard that matches ipython notebook(s)')
copy_ipynb_parser.set_defaults(func=copy_ipynb)

def backup_ipython_notebooks(playground_name, ipython_data_backup_dir):
    print "backing up {} ipython notebooks to {}".format(playground_name, ipython_data_backup_dir)
    ssh_exec_all([
        "mkdir -p " + ipython_data_backup_dir,
        "cp -r " + ipython_data_dir(playground_name) + "/* " + ipython_data_backup_dir + "/"
    ])

def on_server_backup(args):
    ssh_exec("mkdir -p " + args.backup_dir)
    playground_backup_dir = os.path.join(args.backup_dir, args.playground_name)
    ssh_exec("test ! -d " + playground_backup_dir)

    stop(args)

    ipython_data_backup_dir = playground_backup_dir + "/ipython-notebook-root/data"
    backup_ipython_notebooks(args.playground_name, ipython_data_backup_dir)

    minecraft_world_backup_dir = playground_backup_dir + "/minecraft-server/world"
    ssh_exec_all([
        "mkdir -p " + minecraft_world_backup_dir,
        "cp -r " + minecraft_world_dir(args.playground_name) + "/* " + minecraft_world_backup_dir + "/"
    ])

    start(args)
on_server_backup_parser = subparsers.add_parser("on-server-backup", help='{} on-server-backup')
on_server_backup_parser.add_argument('backup_dir', help='root dir for this backup')
on_server_backup_parser.set_defaults(func=on_server_backup)

def on_server_restore(args):
    ssh_exec("test -d " + args.playground_backup_dir + "/ipython-notebook-root/data")

    stop(args)

    timestamp_str = now_str()

    ssh_exec("(file {} && mv {} {}.backup.{}) || true".format(
        ipython_data_dir(args.playground_name),
        ipython_data_dir(args.playground_name),
        ipython_data_dir(args.playground_name),
        timestamp_str))

    ssh_exec("(file {} && mv {} {}.backup.{}) || true".format(
        minecraft_world_dir(args.playground_name),
        minecraft_world_dir(args.playground_name),
        minecraft_world_dir(args.playground_name),
        timestamp_str))

    ipython_data_backup_dir = args.playground_backup_dir + "/ipython-notebook-root/data"
    ssh_exec_all([
        "mkdir " + ipython_data_dir(args.playground_name),
        "cp -r " + ipython_data_backup_dir + "/* " + ipython_data_dir(args.playground_name) + "/"
    ])

    minecraft_world_backup_dir = args.playground_backup_dir + "/minecraft-server/world"
    ssh_exec_all([
        "mkdir " + minecraft_world_dir(args.playground_name),
        "cp -r " + minecraft_world_backup_dir + "/* " + minecraft_world_dir(args.playground_name) + "/"
    ])

    start(args)
on_server_restore_parser = subparsers.add_parser("on-server-restore", help='{} on-server-restore')
on_server_restore_parser.add_argument('playground_backup_dir', help='server backup dir of playground')
on_server_restore_parser.set_defaults(func=on_server_restore)


def from_local_restore(args):
    if not os.path.isdir(args.playground_backup_dir + "/ipython-notebook-root/data"):
        raise Exception(args.playground_backup_dir  + " backup not found.")

    stop(args)

    ssh_exec("(file {} && mv {} {}.backup) || true".format(
        ipython_data_dir(args.playground_name),
        ipython_data_dir(args.playground_name),
        ipython_data_dir(args.playground_name)))

    ssh_exec("(file {} && mv {} {}.backup) || true".format(
        minecraft_world_dir(args.playground_name),
        minecraft_world_dir(args.playground_name),
        minecraft_world_dir(args.playground_name)))

    ipython_data_backup_dir = args.playground_backup_dir + "/ipython-notebook-root/data"
    scp_r(ipython_data_backup_dir + "/", ipython_data_dir(args.playground_name) + "/")

    minecraft_world_backup_dir = args.playground_backup_dir + "/minecraft-server/world"
    scp_r(minecraft_world_backup_dir + "/", minecraft_world_dir(args.playground_name) + "/", )

    start(args)
from_local_restore_parser = subparsers.add_parser("from-local-restore", help='{} from-local-restore')
from_local_restore_parser.add_argument('playground_backup_dir', help='local backup dir of playground')
from_local_restore_parser.set_defaults(func=from_local_restore)

def to_local_backup(args):
    if not os.path.isdir(args.backup_dir):
        os.makedirs(args.backup_dir)
    playground_backup_dir = os.path.join(args.backup_dir, args.playground_name)

    if os.path.isdir(playground_backup_dir):
        raise Exception(playground_backup_dir  + " already exists, will not attempt to back up - " +
            "this avoids risk of clobbering a previous backup.")

    stop(args)

    ipython_data_backup_dir = playground_backup_dir + "/ipython-notebook-root/data"
    os.makedirs(ipython_data_backup_dir)
    scp_r_remote_to_local(ipython_data_dir(args.playground_name) + "/*", ipython_data_backup_dir + "/")

    minecraft_world_backup_dir = playground_backup_dir + "/minecraft-server/world"
    os.makedirs(minecraft_world_backup_dir)
    scp_r_remote_to_local(minecraft_world_dir(args.playground_name) + "/*", minecraft_world_backup_dir + "/")

    start(args)
to_local_backup_parser = subparsers.add_parser("to-local-backup", help='{} to-local-backup')
to_local_backup_parser.add_argument('backup_dir', help='root dir for this backup')
to_local_backup_parser.set_defaults(func=to_local_backup)

def from_local_restore(args):
    if not os.path.isdir(args.playground_backup_dir + "/ipython-notebook-root/data"):
        raise Exception(args.playground_backup_dir  + " backup not found.")

    stop(args)

    ssh_exec("(file {} && mv {} {}.backup) || true".format(
        ipython_data_dir(args.playground_name),
        ipython_data_dir(args.playground_name),
        ipython_data_dir(args.playground_name)))

    ssh_exec("(file {} && mv {} {}.backup) || true".format(
        minecraft_world_dir(args.playground_name),
        minecraft_world_dir(args.playground_name),
        minecraft_world_dir(args.playground_name)))

    ipython_data_backup_dir = args.playground_backup_dir + "/ipython-notebook-root/data"
    scp_r(ipython_data_backup_dir + "/", ipython_data_dir(args.playground_name) + "/")

    minecraft_world_backup_dir = args.playground_backup_dir + "/minecraft-server/world"
    scp_r(minecraft_world_backup_dir + "/", minecraft_world_dir(args.playground_name) + "/", )

    start(args)
from_local_restore_parser = subparsers.add_parser("from_local_restore", help='{} from_local_restore')
from_local_restore_parser.add_argument('playground_backup_dir', help='local backup dir of playground')
from_local_restore_parser.set_defaults(func=from_local_restore)

def get_all_playground_config():
    all_config = {}
    json_lines = ssh_get("cat playgrounds/*/playground.json").split("\n")
    for line in json_lines:
        p = PlaygroundConfig()
        p.load_json(line)
        all_config[p.playground_name] = p
    return all_config

def test_config_json(args):
    get_all_playground_config()
add_simple_subparser(test_config_json)

def tmux_new_session_command(working_dir, session_name, command):
    return "cd {} && /usr/bin/tmux new-session -s {} -d '{}'".format(working_dir, session_name, command)

# TODO: make this a top-level command

def at_reboot_tmux_crontab_line(playground_name, subdir, tmux_session_suffix, command):
    return "@reboot " + tmux_new_session_command(
                pdir(playground_name) + "/" + subdir,
                playground_name + "-" + tmux_session_suffix,
                command)

def write_crontab(args):
    crontab_lines = []
    crontab_lines.append("@reboot /usr/bin/tmux new-session -s dstat -d '/usr/bin/dstat --time --load --mem --net  --io --swap --page --sys'")
    crontab_lines.append("@reboot /usr/bin/tmux new-session -s mapcrafter -d 'while :; do nice -n 20 /usr/bin/mapcrafter -c mapcrafter.conf; sleep 30; done'")
    all_config = get_all_playground_config()
    for playground_name in all_config:
        crontab_lines.append(
            at_reboot_tmux_crontab_line(playground_name, "minecraft-server", "mc", "java -Xmx2g -Xms2g -Djava.net.preferIPv4Stack=true -XX:-UsePerfData -XX:+UseConcMarkSweepGC -XX:PermSize=256m -XX:MaxPermSize=256m -Xmn512m -XX:ParallelGCThreads=4 -jar sponge-minecraft-server.jar run"))
        crontab_lines.append(
            at_reboot_tmux_crontab_line(playground_name, "ipython-notebook-root", "py", "../../../.python-virtualenv/bin/ipython notebook --config=ipython_server_config.py    --ipython-dir=."))
    f = open("/tmp/crontab", 'w')
    f.write("\n".join(crontab_lines) + "\n")
    f.close()
    scp_r("/tmp/crontab", "new-crontab")
    ssh_exec("cat new-crontab | crontab -")
add_simple_subparser(write_crontab)

def write_mapcrafter_conf(args):
    lines = []
    lines.append("output_dir = /home/ubuntu/maps")
    lines.append("")
    all_config = get_all_playground_config()
    for playground_name in all_config:
        lines.append("[world:{}_world]".format(playground_name))
        lines.append("input_dir = /home/ubuntu/playgrounds/{}/minecraft-server/world".format(playground_name))
        lines.append("")
        lines.append("[map:map_{}_world]".format(playground_name))
        lines.append("name = {} world".format(playground_name))
        lines.append("world = {}_world".format(playground_name))
        lines.append("")
    f = open("/tmp/mapcrafter.conf", 'w')
    f.write("\n".join(lines) + "\n")
    f.close()
    scp_r("/tmp/mapcrafter.conf", "mapcrafter.conf")
add_simple_subparser(write_mapcrafter_conf)

args = parser.parse_args()
args.func(args)
