#!/usr/bin/env python

import argparse
import os.path
import shutil
from string import Template

from lib import const
from lib.core import ssh_exec, ssh_exec_all, ssh_get, save_settings, scp_r, BaseSettingsClass

OVERLAY_STAGING_DIR = "/tmp/playground-staging"

class PlaygroundConfig(BaseSettingsClass):
  def __init__(self):
    self.playground_name = None
    self.minecraft_server_port = None
    self.minecraft_gamemode = None
    self.minecraft_force_gamemode = None
    self.minecraft_spawn_monsters = None
    self.minecraft_player_idle_timeout = None
    self.minecraft_announce_player_achievements = None
    self.raspberry_juice_sponge_plugin_port = None
    self.ipython_notebook_server_http_port = None
    self._freeze() # no more attribute definitions are allowed

parser = argparse.ArgumentParser()
parser.add_argument('playground_name', type=str, help='help TODO')
subparsers = parser.add_subparsers(help='sub-command help')

def pdir(playground_name):
  return "playgrounds/{}".format(playground_name)

def copy_minecraft_server_files(playground_name):
  ssh_exec("file {}/minecraft-server || (mkdir {}/minecraft-server && cp -R {}/. {}/minecraft-server/)".format(
    pdir(playground_name), pdir(playground_name), const.MINECRAFT_LATEST_DIR, pdir(playground_name)))

def prepare_ipython(playground_name):
  ssh_exec("mkdir -p {}/ipython-notebook-root/data".format(pdir(playground_name)))

def stage_overlay_files(playground_name):
  shutil.rmtree(OVERLAY_STAGING_DIR, ignore_errors=True)
  shutil.copytree("playground-overlay", OVERLAY_STAGING_DIR)

  config = PlaygroundConfig()
  config.playground_name = playground_name

  config.ipython_notebook_server_http_port = 25564

  config.minecraft_server_port = 25565
  config.raspberry_juice_sponge_plugin_port = 25566
  config.minecraft_gamemode = 1 # creative
  config.minecraft_force_gamemode = True
  config.minecraft_spawn_monsters = False
  config.minecraft_player_idle_timeout = 1440 # 1 day
  config.minecraft_announce_player_achievements = False # annoying

  config.write_to_file("{}/playground.json".format(OVERLAY_STAGING_DIR))

  for dirpath, dnames, fnames in os.walk(OVERLAY_STAGING_DIR):
    for f in fnames:
      path = os.path.join(dirpath, f)
      if (path.endswith(".template")):
        new_file_content = Template(open(path).read()).substitute(config.to_dict())
        path_without_template_extension = os.path.splitext(path)[0]
        f = open(path_without_template_extension, 'w')
        f.write(new_file_content)
        f.close()
        os.remove(path)

def upload_overlay_files(playground_name):
  scp_r(OVERLAY_STAGING_DIR + "/.", pdir(playground_name))

def add_simple_subparser(f):
  command_name = f.__name__.replace("_", "-")
  p = subparsers.add_parser(command_name, help='{} help'.format(command_name))
  p.set_defaults(func=f)

def exists(args):
  ssh_exec("file {}".format(pdir(args.playground_name)))
add_simple_subparser(exists)

def status(args):
  # TODO: should be better
  ssh_exec("file {} || true".format(pdir(args.playground_name)))
add_simple_subparser(status)

def test_overlay(args):
  stage_overlay_files(args.playground_name)
add_simple_subparser(test_overlay)

def overlay(args):
  stage_overlay_files(args.playground_name)
  upload_overlay_files(args.playground_name)
add_simple_subparser(overlay)

def create(args):
  ssh_exec("mkdir -p {}".format(pdir(args.playground_name)))
  copy_minecraft_server_files(args.playground_name)
  prepare_ipython(args.playground_name)
  overlay(args)
  write_crontab(args)
add_simple_subparser(create)

def stop(args):
  ssh_exec("lsof +D playgrounds/" + args.playground_name + " | egrep '^tmux ' | awk '{print $2}' | xargs -r kill")
add_simple_subparser(stop)

def start(args):
  start_commands = ssh_get("crontab -l | grep '@reboot cd " + pdir(args.playground_name) + "' | sed 's/^\@reboot //'").split("\n")
  for start_command in start_commands:
    ssh_exec(start_command)
add_simple_subparser(start)

def update(args):
  stop(args)
  create(args)
add_simple_subparser(update)

def destroy(args):
  exists(args)
  stop(args)
  ssh_exec("rm -rf {}".format(pdir(args.playground_name)))
add_simple_subparser(destroy)


def get_all_playground_config():
  all_config = {}
  json_lines = ssh_get("cat playgrounds/*/playground.json").split("\n")
  for line in json_lines:
    p = PlaygroundConfig()
    p.load_json(line)
    all_config[p.playground_name] = p
  return all_config

def test_config_json(args):
  get_all_playground_config()
add_simple_subparser(test_config_json)

def tmux_new_session_command(working_dir, session_name, command):
  return "cd {} && /usr/bin/tmux new-session -s {} -d '{}'".format(working_dir, session_name, command)

# TODO: make this a top-level command

def at_reboot_tmux_crontab_line(playground_name, subdir, tmux_session_suffix, command):
  return "@reboot " + tmux_new_session_command(
        pdir(playground_name) + "/" + subdir,
        playground_name + "-" + tmux_session_suffix,
        command)

def write_crontab(args):
  crontab_lines = []
  all_config = get_all_playground_config()
  for playground_name in all_config:
    crontab_lines.append(
      at_reboot_tmux_crontab_line(playground_name, "minecraft-server", "mc", "java -jar sponge-minecraft-server.jar run"))
    crontab_lines.append(
      at_reboot_tmux_crontab_line(playground_name, "ipython-notebook-root", "py", "IPYTHONDIR=./ ../../../.python-virtualenv/bin/ipython notebook --config=ipython_server_config.py"))
  f = open("/tmp/crontab", 'w')
  f.write("\n".join(crontab_lines) + "\n")
  f.close()
  scp_r("/tmp/crontab", "new-crontab")
  ssh_exec("cat new-crontab | crontab -")
add_simple_subparser(write_crontab)

args = parser.parse_args()
args.func(args)
